#include <ESP32Servo.h>
#include <WiFi.h>
#include <WiFiUdp.h>
// Wi-Fi credentials
const char* ssid = "Telesto";         // Replace with your WiFi SSID
const char* password = "qgcmp0619";   // Replace with your WiFi password
// UDP settings
WiFiUDP udp;
const int udpPort = 12345;            // Port to listen on, same as in the Python code
char incomingPacket[255];             // Buffer for incoming data
// Servo settings
Servo myServo;
const int servoPin = 13;              // GPIO pin where the servo is connected
const int servoOpenAngle = 120;        // Angle to move the servo when message is detected
const int servoCloseAngle = 0;        // Angle to reset the servo
void setup() {
  // Start Serial Monitor
  Serial.begin(115200);
  // Connect to Wi-Fi
  Serial.print("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");
  // Print ESP32's IP address
  Serial.print("ESP32 IP Address: ");
  Serial.println(WiFi.localIP());
  // Start listening for UDP messages
  udp.begin(udpPort);
  Serial.printf("Listening on UDP port %d\n", udpPort);
  // Initialize the servo
  myServo.attach(servoPin);
  myServo.write(servoCloseAngle);     // Ensure servo starts in the closed position
}

void loop() {
  // Check for incoming UDP packets
  int packetSize = udp.parsePacket();
  if (packetSize) {
    // Read the packet into the buffer
    int len = udp.read(incomingPacket, 255);
    if (len > 0) {
      incomingPacket[len] = 0; // Null-terminate the string
    }
    // Print received message
    Serial.printf("Received packet: %s\n", incomingPacket);
    // Check if the message is "fire detected"
    if (strcmp(incomingPacket, "fire detected") == 0) {
      Serial.println("Fire detected! Moving servo.");
      // Move the servo to the open position
      myServo.write(servoOpenAngle);
      delay(1000);  // Keep servo in position for 1 second
      // Move the servo back to the closed position
      myServo.write(servoCloseAngle);
    }
  }
  delay(10); // Small delay for stability
}
