import socket
import cvzone
import cv2
import math
import time
from ultralytics import YOLO

# YOLO model for fire detection
model = YOLO('fire.pt')

# Classnames for fire
classnames = ['fire']

# Fire detection confidence threshold
CONFIDENCE_THRESHOLD = 0.7  # Updated threshold to 0.7 (70%)

# ESP32 connection details
esp32_ip = "192.168.55.227"  # Replace with ESP32 IP address
esp32_port = 12345           # Port ESP32 is listening on

# Create a UDP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Variables to track fire detection time
fire_detected_time = 0
fire_detected = False

# Time duration in seconds to consider fire as detected
required_fire_duration = 5  # 5 seconds of continuous fire detection

# Running real-time from webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()

    # Check if the frame is valid
    if not ret or frame is None:
        print("Failed to capture frame. Check the video stream URL.")
        continue  # Skip to the next iteration if no valid frame is captured

    # Resize the frame if needed
    frame = cv2.resize(frame, (640, 480)) if frame.shape[:2] != (480, 640) else frame
    result = model(frame, stream=True)

    # Flag to track fire detection in the current frame
    fire_detected_in_frame = False

    # Getting bbox, confidence, and class names information
    for info in result:
        boxes = info.boxes
        for box in boxes:
            confidence = box.conf[0]
            if confidence > CONFIDENCE_THRESHOLD:
                confidence = math.ceil(confidence * 100)
                Class = int(box.cls[0])

                # Draw bounding box
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                box_width = x2 - x1
                box_height = y2 - y1

                # Consider large enough bounding boxes to avoid false positives
                if box_width > 50 and box_height > 50:
                    fire_detected_in_frame = True
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 5)
                    cvzone.putTextRect(frame, f'{classnames[Class]} {confidence}%', [x1 + 8, y1 + 100],
                                       scale=1.5, thickness=2)

    # Fire detection time logic
    current_time = time.time()

    if fire_detected_in_frame:
        if not fire_detected:
            fire_detected_time = current_time  # Start counting when fire is detected
            fire_detected = True
        elif current_time - fire_detected_time >= required_fire_duration:
            # Fire detected for the required duration, send UDP message
            message = b"fire detected"
            sock.sendto(message, (esp32_ip, esp32_port))
            print(f"Message sent: {message.decode()}")
            fire_detected = False  # Reset after sending the message
    else:
        fire_detected = False

    # Display the frame
    cv2.imshow('frame', frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()
sock.close()
